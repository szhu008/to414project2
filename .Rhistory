lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(2,3,4))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(2,3,5))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(2,3,4))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
tslynxdiff <- diff(tslynxdata, differences = 1)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 2)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 3)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 10)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 3)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
pacf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 4)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
#from graph it seems lag 1 and 2 exceed significant bounds so we we will run MA(2)
#select AR
pacf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 5)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
#from graph it seems lag 1 and 2 exceed significant bounds so we we will run MA(2)
#select AR
pacf(tslynxdiff)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
lynxarima <- arima(tslynxdata, order = c(0,5,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
pacf(tslynxdiff)
lynxarima <- arima(tslynxdata, order = c(6,5,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(6,5,2))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(6,5,0))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(5,5,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
pacf(tslynxdiff)
lynxarima <- arima(tslynxdata, order = c(5,5,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(6,5,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
tslynxdiff <- diff(tslynxdata, differences = 1)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
#from graph it seems lag 1 exceed significant bounds so we we will run MA(1)
#select AR
pacf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 2)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
#from graph it seems lag 1 exceed significant bounds so we we will run MA(1)
#select AR
pacf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 2)
plot.ts(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 0)
plot.ts(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 0)
plot.ts(tslynxdiff)
acf(tslynxdata)
tslynxdiff <- diff(tslynxdata, differences = 1)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
tslynxdiff <- diff(tslynxdata, differences = 2)
plot.ts(tslynxdiff)
#select MA
acf(tslynxdiff)
#from graph it seems lag 1 exceed significant bounds so we we will run MA(1)
#select AR
pacf(tslynxdiff)
lynxarima <- arima(tslynxdata, order = c(0,2,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(2,2,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c9,2,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(9,2,1))
lynxarima
library(forecast)
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
lynxarima <- arima(tslynxdata, order = c(0,2,1))
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
#incorporating AR(9) we see (which makes sense since the cycles seem to be around 9 years we have)
lynxarima <- arima(tslynxdata, order = c(9,2,1))
lynxarima
lynxarimaforecast <- forecast.Arima(lynxarima, h=5)
lynxarimaforecast
plot.forecast(lynxarimaforecast)
acf(lynxarimaforecast$residuals, lag.max=20)
Box.test(lynxarimaforecast$residuals, lag=20, type="Ljung-Box")
plot.ts(lynxarimaforecast$residuals)
setwd("../to414project2/")
quantile
?pnorm
setwd("../Session13/")
rm(list=ls())
loandata <- read.csv("Listings2013.csv")
str(loanddata)
str(loandata)
4*4+1
2*2+1
c <- 1:16
c**2
c%2
c %% 2
c
4 %% 3
4 %% 4
c ** 2 %% 33
x <- c(0,2,4,6,8)
len <- c(439,439.12,439.21,439.31,439.4,439.5)
lm(len ~weight)
lm(len ~ x)
len[-length(len)]
len <- len[-length(len)]
lm(len ~ x)
cor(x, len)
cor(x, len)*sd(len)/sd(x)
sqrt(.25*.75*100)
sqrt(.25*.75*100)*.8
sqrt(.25*.75*100)*1.33
sqrt(.5*.5*100)
sqrt(.5*.5*100)*.8
(17+2*54+29*5)
(1.5)^2/4+.5^2/4+(2.5)^2/4
*100((1.5)^2/4+.5^2/4+(2.5)^2/4)
100*((1.5)^2/4+.5^2/4+(2.5)^2/4)
sqrt(100*((1.5)^2/4+.5^2/4+(2.5)^2/4))
sqrt(100*((1.5)^2/4+.5^2/4+(2.5)^2/4))*1.33
tmp <- sqrt(100*((1.5)^2/4+.5^2/4+(2.5)^2/4))
20/tmp
tmp <- sqrt(100*((1.5)^2/4+.5^2/2+(2.5)^2/4))
20/tmp
setwd('../Session16')
../Session16/
q
setwd("../Session16/")
rm(list=ls())
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE) #Import Data
wbcd <- wbcd[-1]
str(wbcd)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, 1)
round(prop.table(table(wbcd$diagnosis)) * 100, 1)
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, 1)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE) #Import Data
wbcd <- wbcd[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, 1)
table(wbcd$diagnosis)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
round(prop.table(table(wbcd$diagnosis)) * 100, 1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_n
str(wbcd_n)
class(wbcd)
wbcd[1:2]
summary(wbcd_n[c("radius_mean", "area_mean", "smoothness_mean")])
wbcd_train <- wbcd_n[1:469, ]; wbcd_test <- wbcd_n[470:569, ]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k=21)
wbcd_train_labels <- wbcd[1:469, 1]; wbcd_test_labels <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k=21)
wbcd_test_pred
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
?knn
iris2 <- iris[sample(nrow(iris)),]
nrow(iris2)
iris2_train <- iris2[1:125,]; iris2_test <- iris2[126:,];
iris2_train <- iris2[1:125,]; iris2_test <- iris2[126:150,];
head(iris2)
iris2_train_lables <- iris[1:125, c("Species")]
iris2_train_lables
head(wbcd_n)
head(iris2_train)
iris2_train <- iris2_train[-5]
head(iris2_train)
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
iris2_train_lables <- iris[1:125, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
iris2_train <- iris2_train[-5]
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
iris2 <- iris[sample(nrow(iris)),]
iris2_train <- iris2[1:125,]; iris2_test <- iris2[126:150,];
iris2_train <- iris2_train[-5]
iris2_train <- iris2_train[-5]
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
head(iris2_train)
head(iris2_test)
iris2 <- iris[sample(nrow(iris)),]
iris2_train <- iris2[1:125,]; iris2_test <- iris2[126:150,];
iris2_train <- iris2_train[-5]
iris2_test <- iris2_test[-5]
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
iris2_test_labels <- iris[126:150, c("Species")]
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
head(iris2)
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
head(iris2_test_labels)
iris2_test_labels
iris2 <- iris[sample(nrow(iris)),]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
iris2_n <- as.data.frame(lapply(iris2[1:4], normalize))
head(iris2_n)
iris2_train <- iris2_n[1:125,]; iris2_test <- iris2_n[126:150,];
head_(iris2_train)
head(iris2_train)
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_labels
view(iris2)
View(iris2)
iris2_n <- as.data.frame(lapply(iris2[1:4], normalize))
iris2_train <- iris2_n[1:125,]; iris2_test <- iris2_n[126:150,];
iris2_train_labels <- iris[1:125, c("Species")]
iris2_test_labels <- iris[126:150, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
view(iris2_test_labels)
View(iris2_test_labels)
iris[125:150]
iris[126:150,]
iris2_train_labels <- iris2[1:125, c("Species")]
iris2_test_labels <- iris2[126:150, c("Species")]
iris2_test_pred <- knn(train = iris2_train, test = iris2_test,
cl = iris2_train_labels, k=21)
CrossTable(x = iris2_test_labels, y = iris2_test_pred, prop.chisq=FALSE)
rm(list=ls())
setwd("../to414project2/")
loandata <- read.csv("Listings2013.csv")
str(loandata)
attach(loandata)
summary(number_of_days)
tapply(borrower_rate, prosper_rating, summary)
summary(listing_term)
unique(listing_term)
plot(listing_term)
sum(listing_term == 12)
sum(listing_term == 36)
sum(listing_term == 60)
sum(loan_status == 1)
nrow(loandata)
sum(loan_status == 4)
sum(loan_status == 3)
sum(loan_status == 2)
naive_model <- lm(borrower_rate ~ loan_status_description + prosper_rating, data = loandata )
summary(naive_model)
head(number_of_days)
head(loandata)
tapply(borrower_rate, prosper_rating, summary)
sum(prosper_rating == "HR")
sum(prosper_rating %in% c("C", "D", "E", "HR"))
sum(prosper_rating == "AA")
sum(prosper_rating == "AA" & (loan_status == 3 || loan_status == 2))
sum(prosper_rating == "AA" & (loan_status == 3 || loan_status == 4))
sum(prosper_rating == "AA" & (loan_status == 1 || loan_status == 4))
sum(prosper_rating == "AA" & (loan_status == 2 || loan_status == 4))
sum(prosper_rating == "A" & (loan_status == 2 || loan_status == 3 || loan_status == 4))
sum(prosper_rating == "B" & (loan_status == 2 || loan_status == 3 || loan_status == 4))
sum(prosper_rating == "C" & (loan_status == 2 || loan_status == 3 || loan_status == 4))
sum(prosper_rating == "D" & (loan_status == 2 || loan_status == 3 || loan_status == 4))
sum(prosper_rating == "D" & (loan_status == 1 || loan_status == 3 || loan_status == 4))
summary(loan_status)
sum(loan_status == 1)
sum(loan_status == 2)
sum(loan_status == 3)
sum(loan_status == 4)
sum(prosper_rating == "A" && loan_status == 4)
sum(prosper_rating == "A" & loan_status == 4)
sum(prosper_rating == "A" & (loan_status == 2 | loan_status == 3 | loan_status == 4))
sum(prosper_rating == "A" & (loan_status == 2 | loan_status == 3))
sum(prosper_rating == "A")
sum(prosper_rating == "A" & (loan_status == 2 | loan_status == 3))
sum(prosper_rating == "AA" & (loan_status == 2 | loan_status == 3))
sum(prosper_rating == "AA")
sum(prosper_rating == "AA" & loan_status == 4)
sum(prosper_rating == "HR" & (loan_status == 2 | loan_status == 3))
sum(prosper_rating == "HR" & loan_status == 4)
str(loandata)
sum(loan_status == 4)
sum(loan_status == 1)
sum(loan_status == 2 && loan_status == 3)
sum(loan_status == 2 | loan_status == 3)
naive_model <- lm(borrower_rate ~ loan_status + prosper_rating + income_range, data = loandata )
vif(naive_model)
naive_model <- lm(borrower_rate ~ loan_status + prosper_rating + income_range + satisfactory_accounts, data = loandata )
vif(naive_model)
rm(list=ls())
setwd("../Session17/")
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
sms_raw <- sms_raw[sample(nrow(sms_raw)),]
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
sms_raw <- sms_raw[sample(nrow(sms_raw)),]
ncol(sms_raw)
nrow(sms_raw)
sample(1:5)
sample(1:5)
sample(1:5)
sample(1:5)
str(sms_raw)
sms_raw[2,]
sms_raw[2,2]
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
library(tm)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
install.packages('tm')
library(tm)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
head(sms_corpus)
print(sms_corpus)
inspect(sms_corpus[1:3])
print(sms_corpus)
corpus_clean <- tm_map(sms_corpus, content_transformer(tolower)) #Converts to lower case
corpus_clean <- tm_map(corpus_clean, content_transformer(removeNumbers)) #Remove all numbers
corpus_clean <- tm_map(corpus_clean, content_transformer(removePunctuation)) #Remove all punctuation characters
corpus_clean <- tm_map(corpus_clean, content_transformer(stripWhitespace)) #Remove all whitespace characters
i am so bad at running. gonnan00000000b
gonna get better doe
running every other day
wowow how much
until i die
which is like
10 min
lololo
then i walk
then i run again
when i revive
wao
clear()
clean()
bitvh
clean()
inspect(sms_corpus[1:3])
inspect(corpus_clean[1:3])
corpus_clean <- Corpus(VectorSource(corpus_clean))
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm
corpus_clean <- tm_map(corpus_clean, content_transformer(removePunctuation)) #Remove all punctuation characters
corpus_clean <- tm_map(corpus_clean, content_transformer(stripWhitespace)) #Remove all whitespace characters
corpus_clean <- Corpus(VectorSource(corpus_clean))
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm
sms_raw_train <- sms_raw[1:4169, ]
sms_raw_test  <- sms_raw[4170:5559, ]
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test  <- sms_dtm[4170:5559, ]
sms_corpus_train <- corpus_clean[1:4169]
sms_corpus_test  <- corpus_clean[4170:5559]
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))
install.packages("wordcloud")
library(wordcloud)
wordcloud(sms_corpus_train, min.freq = 30, random.order = FALSE)
spam <- subset(sms_raw_train, type == "spam")
ham  <- subset(sms_raw_train, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
findFreqTerms(sms_dtm_train, 5)
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
}
sms_train <- apply(sms_train, MARGIN = 2, convert_counts) # MARGIN = 2 means columns
sms_dict <- Terms(sms_dtm_train)
#sms_dict <- Terms(findFreqTerms(sms_dtm_train, 5)) #Ideally this is what we need - worth trying
sms_train <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))
sms_test  <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))
sms_train <- apply(sms_train, MARGIN = 2, convert_counts) # MARGIN = 2 means columns
rm(list=ls())
setwd("../to414project2/")
load(glmnet)
install.packages(glmnet)
install.packages("glmnet")
library(glmnet)
loandata <- read.csv("Listings2013.csv")
attach(loandata)
attach(loandata)
loandata$loan_status <- as.factor(loandata$loan_status)
head(loandata[-c("loan_status")])
head(loandata[,-c("loan_status")])
head(loandata[c("loan_status")])
names(loandata)
match("loan_status", names(loandata))
loandata_nodescription <- loandata[,-4]
head(loandata_nodescription)
names(loandata_nodescription)
fit = glmnet(loandata_nodescription, loandata$loan_status, family = "binomial")
y <- loan_status == 2 | loan_status == 3
fit = glmnet(loandata_nodescription, y, family = "binomial")
yval <- loan_status == 2 | loan_status == 3
fit = glmnet(loandata_nodescription, yval, family = "binomial")
str(loandata_nodescription)
fit = glmnet(principal_balance, yval, family = "binomial")
